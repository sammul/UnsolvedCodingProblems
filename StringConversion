Q32. (string conversion) “ABCD1234” ==> “A1B2C3D4”
void Reverse(char a[], int left, int right) {
int i,j;
for(i = left,j = right; i < j; i++,j‐‐) {
char tmp = a[i];
a[i] = a[j];
a[j] = tmp;
}
return;
}
void convert(char a[], int left, int right) {
if (right ‐ left <= 1)
return;
int size = right ‐ left + 1;
int mid = left + size/2;
int leftmid = left + size/4;
int rightmid = left + size * 3/4;
Reverse(a, leftmid, mid‐1);
Reverse(a, mid, rightmid‐1);
Reverse(a, leftmid, rightmid‐1); // DE123 ‐> 123DE
convert(a, left, left+2*(leftmid‐left)‐1);
convert(a, left+2*(leftmid‐left), right);
}
int main() {
char a[] = "ABCDEFG1234567";
int size = strlen(a);
convert(a, 0, size‐1);
cout<<a<<endl;
return 0
}

Q33. (string conversion) “A1B2C3D4” ==> “ABCD1234”
#include <iostream>
using namespace std;
void reverse(string &s, int start, int end) {
while(start < end) {
swap(s[start], s[end]);
start++;
end‐‐;
}
}
void changeOrderHelper(string &s, int start, int end) {
if (end ‐ start <= 1)
return;
int mid = start + (end ‐ start)/2;
if (mid % 2 == 0) mid = mid + 1;
changeOrderHelper(s, start, mid);
changeOrderHelper(s, mid + 1, end);
reverse(s, start + (mid ‐ start)/2 + 1, mid);
reverse(s, mid + 1, mid + 1 + (end ‐ mid ‐ 1)/2);
reverse(s, start + (mid ‐ start)/2 + 1, mid + 1 + (end ‐ mid ‐
1)/2);
}
void changeOrder(string &s) {
changeOrderHelper(s, 0, s.size() ‐ 1);
}
